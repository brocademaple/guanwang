# Generated by Django 3.2.4 on 2025-10-03 15:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='defectinfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defect_name', models.CharField(choices=[('破裂', '破裂'), ('渗漏', '渗漏'), ('脱节', '脱节'), ('变形', '变形'), ('错口', '错口'), ('腐蚀', '腐蚀'), ('接口材料脱落', '接口材料脱落'), ('异物刺入', '异物刺入'), ('支管暗接', '支管暗接'), ('起伏', '起伏')], max_length=20, verbose_name='缺陷名称')),
                ('defect_level', models.CharField(choices=[('1级', '1级'), ('2级', '2级'), ('3级', '3级'), ('4级', '4级')], max_length=5, verbose_name='缺陷等级')),
                ('defect_start_position_m', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='缺陷起始位置（米）')),
                ('defect_end_position_m', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='缺陷终止位置（米）')),
                ('defect_start_position_clock', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)], verbose_name='缺陷起始位置（钟表法）')),
                ('defect_end_position_clock', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)], verbose_name='缺陷终止位置（钟表法）')),
                ('structural_defect_parameter', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='管段结构性缺陷参数F')),
                ('defect_length_over_1_5m', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='纵向净距大于1.5m的缺陷长度（米）')),
                ('defect_length_1_to_1_5m', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='纵向净距在1 - 1.5m的缺陷长度（米）')),
                ('defect_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='缺陷分值')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '缺陷信息',
                'verbose_name_plural': '缺陷信息',
            },
        ),
        migrations.CreateModel(
            name='PipeSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_point_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='工点名称')),
                ('pipe_length', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='管段长度（米）')),
                ('start_well_number', models.CharField(max_length=50, verbose_name='起始井号')),
                ('end_well_number', models.CharField(max_length=50, verbose_name='终止井号')),
                ('pipe_type', models.CharField(choices=[('雨水管', '雨水管'), ('污水管', '污水管')], max_length=10, verbose_name='管道类型')),
                ('pipe_material', models.CharField(choices=[('塑料管', '塑料管'), ('混凝土管', '混凝土管')], max_length=10, verbose_name='管段材质')),
                ('start_depth', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='起点埋深（米）')),
                ('end_depth', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='终点埋深（米）')),
                ('pipe_diameter', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='管段直径（毫米）')),
                ('area_type', models.CharField(choices=[('中心商业、附近具有甲类民用建筑工程的区域', '中心商业、附近具有甲类民用建筑工程的区域'), ('交通干道、附近具有乙类民用建筑工程的区域', '交通干道、附近具有乙类民用建筑工程的区域'), ('其他行车道路、附近具有丙类民用建筑工程的区域', '其他行车道路、附近具有丙类民用建筑工程的区域'), ('所有其他区域', '所有其他区域')], max_length=50, verbose_name='地区类别')),
                ('soil_type', models.CharField(choices=[('一般土层', '一般土层'), ('粉砂层', '粉砂层'), ('湿陷性黄土', '湿陷性黄土'), ('膨胀土', '膨胀土'), ('淤泥类土', '淤泥类土'), ('红粘土', '红粘土')], max_length=20, verbose_name='土质影响参数')),
                ('wet_loess_level', models.CharField(blank=True, choices=[('Ⅰ', 'Ⅰ'), ('Ⅱ', 'Ⅱ'), ('Ⅲ', 'Ⅲ'), ('Ⅳ', 'Ⅳ')], max_length=5, null=True, verbose_name='湿陷性黄土等级')),
                ('expansive_soil_level', models.CharField(blank=True, choices=[('强', '强'), ('中', '中'), ('弱', '弱')], max_length=5, null=True, verbose_name='膨胀土等级')),
                ('silt_type', models.CharField(blank=True, choices=[('淤泥', '淤泥'), ('淤泥质土', '淤泥质土')], max_length=10, null=True, verbose_name='淤泥类土类型')),
                ('defect_density', models.DecimalField(decimal_places=4, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='管段缺陷密度')),
            ],
        ),
        migrations.CreateModel(
            name='repairsuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repair_suggestion', models.TextField()),
                ('repair_measures', models.TextField()),
                ('defect_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='defect_repair.defectinfo')),
            ],
        ),
        migrations.AddField(
            model_name='defectinfo',
            name='pipe_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defects', to='defect_repair.pipesection', verbose_name='所属管段'),
        ),
    ]
